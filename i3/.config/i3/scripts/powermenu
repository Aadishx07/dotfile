#!/usr/bin/env bash
#
# Use rofi/zenity to change system runstate using systemd.
#
# Inspired by i3pystatus wiki:
# https://github.com/enkore/i3pystatus/wiki/Shutdown-Menu
#
# Original author: Benjamin Chrétien <chretien at lirmm dot fr>
# Modified to work with the latest rofi update by joekamprad <joekamprad@endeavouros.com>
#
# This program is free software under the GPLv3 License.
# For details, see <http://www.gnu.org/licenses/>.

#######################################################################
#                            BEGIN CONFIG                             #
#######################################################################

# Colors: FG (foreground), BG (background), HL (highlighted)
FG_COLOR="#bbbbbb"
BG_COLOR="#111111"
HLFG_COLOR="#111111"
HLBG_COLOR="#bbbbbb"
BORDER_COLOR="#222222"

# Options for Rofi
ROFI_OPTIONS=(-theme ~/.config/rofi/powermenu.rasi)

# Zenity configuration
ZENITY_TITLE="Power Menu"
ZENITY_TEXT="Select Action:"
ZENITY_OPTIONS=(--column= --hide-header)

# Prompt for confirmation by default
enable_confirmation=false

# Preferred launcher if both are available
preferred_launcher="rofi"

# Usage help text
usage="$(basename "$0") [-h] [-c] [-p launcher] -- display a menu for shutdown, reboot, lock etc.

Options:
    -h  Show this help text
    -c  Enable user confirmation for actions
    -p  Set preferred launcher (rofi or zenity)

Dependencies:
  - systemd
  - i3
  - Either rofi or zenity
"

#######################################################################
#                             END CONFIG                              #
#######################################################################

# Check if a command exists
command_exists() {
    command -v "$1" &>/dev/null
}

# Verify that systemctl is available
command_exists systemctl || exit 1

# Associative array of actions
declare -A menu=(
    [" Shutdown"]="systemctl poweroff -i"
    [" Reboot"]="systemctl reboot"
    [" Suspend"]="systemctl suspend"
    [" Hibernate"]="systemctl hibernate"
    [" Lock"]="~/.config/i3/scripts/lockscreen"
    [" Logout"]="i3-msg exit"
    [" Cancel"]=""
)

menu_nrows=${#menu[@]}
menu_confirm="Shutdown Reboot Hibernate Suspend Logout"

# Check if user-defined launcher is valid
validate_launcher() {
    if [[ ! " ${launcher_list[@]} " =~ " $1 " ]]; then
        echo "Supported launchers: ${launcher_list[*]}"
        exit 1
    fi
    launcher_list=($(printf "%s\n" "$1" "${launcher_list[@]}" | awk '!seen[$0]++'))
}

# Parse CLI arguments
while getopts "hcp:" option; do
    case "${option}" in
    h)
        echo "$usage"
        exit 0
        ;;
    c) enable_confirmation=true ;;
    p)
        preferred_launcher="${OPTARG}"
        validate_launcher "${preferred_launcher}"
        ;;
    *) exit 1 ;;
    esac
done

# Prepare launcher configuration
prepare_launcher() {
    case "$1" in
    "rofi")
        rofi_colors=(-bc "${BORDER_COLOR}" -bg "${BG_COLOR}" -fg "${FG_COLOR}" -hlfg "${HLFG_COLOR}" -hlbg "${HLBG_COLOR}")
        launcher_exe="rofi"
        launcher_options=(-dmenu -i -lines "${menu_nrows}" "${rofi_colors[@]}" "${ROFI_OPTIONS[@]}")
        ;;
    "zenity")
        launcher_exe="zenity"
        launcher_options=(--list --title="${ZENITY_TITLE}" --text="${ZENITY_TEXT}" "${ZENITY_OPTIONS[@]}")
        ;;
    esac
}

launcher_list=(rofi zenity)
for launcher in "${launcher_list[@]}"; do
    if command_exists "$launcher"; then
        prepare_launcher "$launcher"
        break
    fi
done

[[ -z "${launcher_exe}" ]] && exit 1

# Prompt for user selection
selection=$(printf '%s\n' "${!menu[@]}" | sort | "${launcher_exe}" "${launcher_options[@]}")

# Confirm action if needed
confirm_action() {
    if [[ "$launcher_exe" == "rofi" ]]; then
        confirmed=$(echo -e "Yes\nNo" | rofi -dmenu -i -lines 2 -p "${selection}?" "${rofi_colors[@]}" "${ROFI_OPTIONS[@]}")
        [[ "$confirmed" == "Yes" ]] && confirmed=0
    elif [[ "$launcher_exe" == "zenity" ]]; then
        zenity --question --text "Are you sure you want to ${selection,,}?"
        confirmed=$?
    fi

    [[ "$confirmed" -eq 0 ]] && i3-msg -q "exec --no-startup-id ${menu[${selection}]}"
}

# Execute or confirm the selected action
if [[ -n "$selection" ]]; then
    if $enable_confirmation && [[ " ${menu_confirm[*]} " =~ " $selection " ]]; then
        confirm_action
    else
        i3-msg -q "exec --no-startup-id ${menu[${selection}]}"
    fi
fi
